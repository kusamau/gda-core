/*-
 * Copyright Â© 2015 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.diamond.daq.mapping.api;

import java.beans.PropertyChangeListener;

/**
 * This interface should be implemented by scan paths for use in mapping scans. This will typically be a scan path (e.g. raster) and parameters defining it
 * (e.g. xStep, yStep)
 * <p>
 * Note: xStart, xStop, yStart and yStop should not be specified by the scan path, they are described by the region.
 * <p>
 * This allows any region shape to be mapped using any scan path, for example a circular region could be scanned using a raster or a triangle region using a
 * spiral.
 */
public interface IScanPath {

	/**
	 * Gets the name of the scan path
	 *
	 * @return scanPathName
	 */
	public String getName();

	/**
	 * Classes implementing this interface must have property change support, to allow dynamic GUIs
	 *
	 * @param listener
	 *            to add
	 */
	public void addPropertyChangeListener(PropertyChangeListener listener);

	/**
	 * Classes implementing this interface must have property change support, to allow dynamic GUIs
	 *
	 * @param listener
	 *            to remove
	 */
	public void removePropertyChangeListener(PropertyChangeListener listener);

	// /**
	// * @param region
	// * @return The number of points of this path which are inside the given region
	// * @deprecated Please use the size method on org.eclipse.scanning.api.points.IPointGenerator
	// */
	// @Deprecated
	// public int countPointsInRegion(IROI region);
	//
	// /**
	// * This allows a path to generate a list of points which will fill the space enclosed by the region.
	// *
	// * @param region
	// * the region to be filled
	// * @return a list of points filling the region
	// * @deprecated The scan positions will be generated by a separate service org.eclipse.scanning.api.points.IPointGeneratorService
	// */
	// @Deprecated
	// List<Point> fillRegion(IROI region);
}
