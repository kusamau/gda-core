======================
Developing for the GDA
======================

Commit messages
===============

Start with one short line, preferably less than 50 characters, summarising the changes. Follow this with one empty line,
then a more detailed description.

Here is an example:

::

  SUBSYSTEM: Short (50 chars or less) summary of changes
  
  More detailed explanatory text, if necessary.  Wrap it to about 72
  characters or so.  In some contexts, the first line is treated as the
  subject of an email and the rest of the text as the body.  The blank
  line separating the summary from the body is critical (unless you omit
  the body entirely); tools like rebase can get confused if you run the
  two together.
  
  Write your commit message in the present tense: "Fix bug" and not "Fixed
  bug."  This convention matches up with commit messages generated by
  commands like git merge and git revert.
  
  Further paragraphs come after blank lines.
  
  - Bullet points are okay, too
  
  - Typically a hyphen or asterisk is used for the bullet, preceded by a
   single space, with blank lines in between, but conventions vary here
  
  - Use a hanging indent

Examples of ``SUBSYSTEM``:

- ``CORE`` - the code that is released on the website
- ``DLS`` - Diamond-specific code
- ``CONFIG`` - configuration

The following links provide advice on writing good commit messages:

- `"A Note About Git Commit Messages" <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_ by
  Tim Pope

- `"Creating good commit messages" <http://kernel.org/pub/software/scm/git/docs/user-manual.html#creating-good-commit-messages>`_
  in the `Git User's Manual <http://kernel.org/pub/software/scm/git/docs/user-manual.html>`_

- FreeBSD's `Committer's Guide <http://www.freebsd.org/doc/en_US.ISO8859-1/articles/committers-guide/article.html>`_
  has some useful advice. Search for "Good commit messages"

- ScummVM `Commit Guidelines <http://wiki.scummvm.org/index.php/Commit_Guidelines>`_
