/*-
 * Copyright Â© 2009 Diamond Light Source Ltd., Science and Technology
 * Facilities Council Daresbury Laboratory
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package gda.device.camac;

import gda.device.Camac;
import gda.device.DeviceBase;
import gda.device.DeviceException;

// Jni wrapper for all fns exposed by ESONE.
// In turn uses C Hytec1330.dll to
// wrapper esone.dll supplied by Hytec
// import gda.device.camac.JniESONE_HT1330

/**
 * The Class Hytec1330.
 */
public class Hytec1330 extends DeviceBase implements Camac {
	// private Gpib gpib;
	private int timeout = 10000;

	private String interfaceName;

	// private String name = "";
	private String deviceName;

	// private boolean deviceConnected = false;

	// Hytec/ESONE interface needs branch/crate specifying
	// (where KS3988/GPIB interface doesnt need it)
	// as it goes into an EXT structure, passed to many ESONE calls
	// private int branch = 0;
	// private int crate = 0;
	// private ??? EXT; // EXT struct used by esone calls - generated by
	// cdreg

	/**
	 * Finds the interface card from the xml file makes sure the device is connected
	 */
	@Override
	public void configure() {
		// super.configure();
		/*
		 * Debug.out("Finding: " + interfaceName, 1); if ((gpib = (Gpib) Finder.getInstance().find(interfaceName)) ==
		 * null) { Debug.out("Hytec interface Board " + interfaceName + " not found"); } else { try { Debug.out("Hytec
		 * 1330 configure", 2); //finds the device to make sure it is //actually connected to Hytec interface board
		 * gpib.setTimeOut(name, timeout); int device = gpib.findDevice(deviceName); Debug.out("Hytec interface Board
		 * Device " + deviceName + " found" + device, 1); deviceConnected = true; //initialiseHytec1330(); } catch
		 * (DeviceException de) { Debug.out( "Exception occured in configuring " + name + de.getMessage()); } }
		 */
	}

	/**
	 * @return Returns the deviceName.
	 */
	@Override
	public String getDeviceName() {
		return deviceName;
	}

	/**
	 * @param deviceName
	 *            The deviceName to set.
	 */
	@Override
	public void setDeviceName(String deviceName) {
		this.deviceName = deviceName;
	}

	/**
	 * @return Returns the interfaceName.
	 */
	@Override
	public String getInterfaceName() {
		return interfaceName;
	}

	/**
	 * @param interfaceName
	 *            The interfaceName to set.
	 */
	@Override
	public void setInterfaceName(String interfaceName) {
		this.interfaceName = interfaceName;
	}

	/**
	 * @return Returns the timeout.
	 */
	@Override
	public int getTimeout() {
		return timeout;
	}

	/**
	 * @param timeout
	 *            The timeout to set.
	 */
	@Override
	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	/**
	 * @param camacCall
	 * @param station
	 * @param subAddress
	 * @param functionCode
	 * @param qReq
	 * @param nCycle
	 * @param data
	 * @param qSet
	 * @return 1 if successful, 0 if unsuccesful
	 * @throws DeviceException
	 */
	@Override
	public int camacAction(int camacCall, int station, int subAddress, int functionCode, boolean qReq, int nCycle,
			int data[], Boolean qSet/*
									 * , Integer status
									 */) throws DeviceException {

		return 1;
	}

}
