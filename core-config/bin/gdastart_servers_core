
# Run the "gdastart_servers_pre" scripts to set up the environment as required.
# For Facility, Group, and Instance, there can be a pre-script, and a mode-specific pre-script (all optional)
# Note that in "live" mode, these scripts are run twice, so they must be idempotent:
# (1) on the user machine, when the user issues the gdastart command
# (2) on the control machine, when remotestartupscript.sh issues the gdastart command
# 
for filename in \
  "${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/bin/gdastart_servers_pre_facility" \
  "${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/etc/${GDA_MODE}/gdastart_servers_pre_facility" \
  "${GDA_WORKSPACE_PARENT}/${GDA_GROUP_CONFIG_rel}/bin/gdastart_servers_pre_group" \
  "${GDA_WORKSPACE_PARENT}/${GDA_GROUP_CONFIG_rel}/etc/${GDA_MODE}/gdastart_servers_pre_group" \
  "${GDA_WORKSPACE_PARENT}/${GDA_INSTANCE_CONFIG_rel}/bin/gdastart_servers_pre_instance" \
  "${GDA_WORKSPACE_PARENT}/${GDA_INSTANCE_CONFIG_rel}/etc/${GDA_MODE}/gdastart_servers_pre_instance"
do
  if [ -e "${filename}" ]; then
    . ${filename}
  fi
done

echo "test echo here $HOSTNAME"

if [[ "${GDA_MODE}" == "live" && "${CONTROL_MACHINE_NAME}" != "$(uname -n)" ]]; then

    if [[ -z "${CONTROL_MACHINE_USER}" || -z "${CONTROL_MACHINE_NAME}" || -z "${CONTROL_MACHINE_SSHKEY_LOC}" ]]; then
      #todo
      echo "for mode live, not set"
      exit
    fi

    # To prevent man-in-the-middle attacks, ensure that we use a validated host key
    if [[ -n "${CONTROL_MACHINE_PUBKEY}" ]]; then
      ssh-keygen -R ${CONTROL_MACHINE_NAME} &> /dev/null
      echo "${CONTROL_MACHINE_NAME} ${CONTROL_MACHINE_PUBKEY}" >> ~/.ssh/known_hosts
    fi

    # Work around problem with ssh where remotestartupscript.sh completes, but ssh doesn't return. 
    ssh -o BatchMode=yes -i ${CONTROL_MACHINE_SSHKEY_LOC} ${CONTROL_MACHINE_USER}@${CONTROL_MACHINE_NAME} &
    # Run in background and wait for OBJECT_SERVER_STARTUP_FILE here. Note that due to network filesystem this is *much* less responsive
    # but should start the client eventually, unlike ssh which may hang forever.

else

    echo
    echo "Restarting the GDA Server, please wait..."
    echo
    echo "Keep this window open, and you will see a pop-up when the restart has completed"
    echo

    # At this point, the pre scripts must have set GDA_LOGS_DIR and GDA_VAR
    #TODO check that

    # Set up the directory for VAR
    mkdir -pv -m 777 ${GDA_VAR}

    # Set up the directory and file in which to write the console log
    # We only invoke one script to do this (the most specific one)
    for filename in \
      "${GDA_WORKSPACE_PARENT}/${GDA_INSTANCE_CONFIG_rel}/bin/gda_setup_consolelog_instance" \
      "${GDA_WORKSPACE_PARENT}/${GDA_GROUP_CONFIG_rel}/bin/gda_setup_consolelog_group" \
      "${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/bin/gda_setup_consolelog_facility"
    do
      if [ -e "${filename}" ]; then
        . ${filename}
        break
      fi
    done

    umask 0002
    # This should fix a problem where sub-directories created in a visit folder end up
    # with a different mask to the default.
    GDA_CORE_SCRIPT=${GDA_WORKSPACE_PARENT}/workspace_git/gda-core.git/uk.ac.gda.core/bin/gda
    export JAVA_OPTS="-Dgda.deploytype=1 -XX:MaxPermSize=1024m" # Seems to fix the reset_namespace problem
    GDA_CORE_SCRIPT_OPTIONS="--headless servers --debug --debugport=8001 --mode=$GDA_MODE"

    echo  ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS}
    echo  ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS} >> ${GDA_servers_CONSOLE_LOG}
    nohup ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS} >> ${GDA_servers_CONSOLE_LOG}  2>&1 &

fi
echo "End of gdastart_servers_core"
