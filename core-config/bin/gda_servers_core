bashlog debug "gda_servers_core" "Entered"

if [[ "${GDA_MODE}" == "live" && "${CONTROL_MACHINE_NAME}" != "$(uname -n)" ]]; then
    # This section runs when in live mode when not on the control machine

    if [[ -n "${GDA_IN_REMOTE_STARTUP-}" ]]; then
        bashlog error "gda_servers_core" "Internal error: remote startup loop detected"
        exit 2
    fi

    # Validate environment variables
    for env_var_name in CONTROL_MACHINE_USER CONTROL_MACHINE_NAME CONTROL_MACHINE_SSHKEY_LOC; do
        bashlog debug "gda_servers_core" "\${${env_var_name}}=${!env_var_name-NOT.SET.OR.NULL}"
        if [ -z "${!env_var_name+x}" ]; then
            bashlog error "gda_servers_core" "\${${env_var_name}} is not set (or is null) - exiting"
            exit 2
        fi
    done

    # To prevent man-in-the-middle attacks, ensure that we use a validated host key
    if [[ -n "${CONTROL_MACHINE_PUBKEY-}" ]]; then
      if [[ -f ~/.ssh/known_hosts ]]; then
        # Only try to remove old key if known_hosts exists, otherwise ssh-keygen failing will return us to the command line.
        bashlog debug "gda_servers_core" "removing old public key for ${CONTROL_MACHINE_NAME} in ~/.ssh/known_hosts"
        ssh-keygen -R ${CONTROL_MACHINE_NAME} &> /dev/null
      fi
      bashlog debug "gda_servers_core" "adding new public key for ${CONTROL_MACHINE_NAME} in ~/.ssh/known_hosts"
      echo "${CONTROL_MACHINE_NAME} ${CONTROL_MACHINE_PUBKEY}" >> ~/.ssh/known_hosts
    fi

    ssh -T -o BatchMode=yes -i ${CONTROL_MACHINE_SSHKEY_LOC} ${CONTROL_MACHINE_USER}@${CONTROL_MACHINE_NAME} ${GDA_OPERATION} &
    export SERVERS_SSH_PID=$!
    # Due to the problem with ssh where remotestartupscript.sh completes, but
    # ssh doesn't return, we run ssh in background but record its PID in
    # SERVERS_SSH_PID. This allows the calling scripts to use lookForFile and
    # wait for either the ssh command completing (fast, but unreliable), or
    # the OBJECT_SERVER_STARTUP_FILE appearing (slow, but reliable). Note that
    # due to network filesystem issues, waiting for the file client side is
    # *much* less responsive but should start the client eventually, even if
    # ssh hangs.

else
    # This runs when live on the control machine or in any mode other than live

    echo
    case "${GDA_OPERATION,,}" in
        stop) echo "Stopping the GDA Server, please wait..." ;;
        start|restart) echo "${GDA_OPERATION^}ing the GDA Server, please wait...";; # ^ converts 1st character to upper case
        *) echo "Restarting the GDA Server, please wait..." ;; # if no stop|start|restart was passed to this script, then restart is assumed
    esac

    # At this point, the pre scripts must have set GDA_LOGS_DIR and GDA_VAR
    #TODO check that

    # Set up the directory for VAR
    mkdir -pv -m 777 ${GDA_VAR}

	if [[ -f "${OBJECT_SERVER_STARTUP_FILE}" ]]; then
	    bashlog info "gda_servers_pre_facility" "deleting ${OBJECT_SERVER_STARTUP_FILE}, last modified $(stat --format=%y ${OBJECT_SERVER_STARTUP_FILE} | cut -c 1-19)"
	    rm -fv ${OBJECT_SERVER_STARTUP_FILE}
	fi

    umask 0002
    # This should fix a problem where sub-directories created in a visit folder end up
    # with a different mask to the default.
    GDA_CORE_SCRIPT=$(readlink -f ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/../uk.ac.gda.core/bin/gda)

    export JAVA_OPTS="-Dgda.deploytype=1 -XX:MaxPermSize=1024m" # Seems to fix the reset_namespace problem
    #GDA_CORE_SCRIPT_OPTIONS="--headless --debug --debugport=8001 --mode=$GDA_MODE $@"
    GDA_CORE_SCRIPT_OPTIONS="--verbose --headless --debug --debugport=8001 --mode=$GDA_MODE --vardir=${GDA_VAR} $@"

    bashlog debug "gda_servers_core" "Starting ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS}"
    echo  ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS} >> ${GDA_LOG_FILE}
    nohup ${GDA_CORE_SCRIPT} ${GDA_CORE_SCRIPT_OPTIONS} >> ${GDA_LOG_FILE}  2>&1

    if [[ ${GDA_OPERATION,,} != "stop" ]]; then
        # Starting; wait for the startup file to be created so that any
        # gda_servers_post scripts don't run before the servers are started.

        ${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/bin/utils/lookForFile $OBJECT_SERVER_STARTUP_FILE $HOSTNAME
        echo
        echo "GDA Server started"

        # TODO: Ideally we would like to stop waiting for the startup file if the startup fails, but all
        #       output from the gda core script is written to the log file and not returned from nohup.
        #       We never find out the exit codes or process status and failed startups will continue to
        #       wait for this file until a subsequent start of the GDA servers works.
    else
        echo
        echo "GDA Server stopped"
    fi
fi

bashlog debug "gda_servers_core" "Exited"
