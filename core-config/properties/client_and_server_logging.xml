<?xml version="1.0" encoding="UTF-8"?>

<!-- scan="true" allows this file to be modified live to change the logging configuration -->
<!-- debug="true" logs the logback configuration -->
<configuration scan="true" scanPeriod="10 seconds" debug="true">

	<!-- Standard shared logging configuration used by the GDA server and client. -->

	<!-- In general you should just use this default logging configuration.

		 Root logger levels, the Log panel filter level and the LogFile pattern can all be configured by properties, so
		 they can be overridden by facility, group or beamline config properties.

		 If you really need to customise your logging setup beyond this, you should copy this file as a template
		 and keep the "include" line below, then override the gda.server.logging.xml property to point to your
		 customised configuration file.
	 -->

	<!-- Include the standard set of properties files -->
	<include file="${gda.core.dir}/properties/logging_properties_includes.xml" />

	<!-- Without this define, we see log messages with: [objectserver/null] or [rcp/null] -->
	<define scope="context" name="JVMNAME" class="gda.util.logging.JvmNamePropertyDefiner" />

	<!-- Appender to send log messages to the log server -->
	<appender name="LogServer" class="ch.qos.logback.classic.AsyncAppender">
		<!-- Wrap the SocketAppender with an AsyncAppender to ensure logging never reduces client or server performance
				http://logback.qos.ch/manual/appenders.html#SocketAppender
				http://logback.qos.ch/manual/appenders.html#AsyncAppender
				http://blog.takipi.com/how-to-instantly-improve-your-java-logging-with-7-logback-tweaks/
		 -->
		<appender class="ch.qos.logback.classic.net.SocketAppender">
			<remoteHost>${gda.logserver.host}</remoteHost>
			<port>${gda.server.logging.port}</port>
			<reconnectionDelay>10000</reconnectionDelay>
			<includeCallerData>true</includeCallerData>
			<queueSize>4096</queueSize>
		</appender>
		<queueSize>1000</queueSize>
		<discardingThreshold>0</discardingThreshold> <!-- This wont drop any messages unless the queue becomes full -->
		<neverBlock>true</neverBlock> <!-- If the message queue becomes full this will drop messages instead of blocking -->
	</appender>
	<!-- Also AsyncAppender ensures threadName is populated, so %thread never falls back to showing the logback thread. -->

	<!-- Send debug and higher level logging messages to the log server by default. In general filtering messages at the
		source is the best way as this prevents performance issues.
		NOTE: Before using the logging system to filter out messages from a noisy class, consider editing the class
		itself to improve how it logs its activity. -->
	<root>
		<level value="${gda.logging.root.level}" />
		<appender-ref ref="LogServer" />
	</root>

	<!-- Here we filter specific loggers for everyone -->

	<!-- Jetty is very noisy at DEBUG level, filter those messages out -->
	<logger name="org.eclipse.jetty" level="INFO" />
	<!-- Also filter noisy GDA packages (NOTE: These could be edited and improved)-->
	<logger name="gda.device.corba.impl" level="INFO" />
	<!-- At DEBUG level activemq logs a message every 10 secs to reassure you its still working -->
	<logger name="org.apache.activemq.transport.AbstractInactivityMonitor" level="INFO" />
	<!-- Reduce logging from completer -->
	<logger name="uk.ac.gda.core.scripts.gda_completer.py" level="INFO" />

	<!-- If this file exists it allows you to customise logging levels for each config -->
	<include file="${gda.config}/properties/_common/logging_customisation.xml" />

	<!-- If this file exists, it allows facilities to customise logging mode dependently-->
	<include file="${gda.facility.dir}/properties/${gda.mode}/logging_customisation.xml" />

</configuration>
